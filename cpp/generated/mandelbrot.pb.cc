// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mandelbrot.proto

#include "mandelbrot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace generated {
constexpr ComplexPoint::ComplexPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : real_(0)
  , imaginary_(0){}
struct ComplexPointDefaultTypeInternal {
  constexpr ComplexPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComplexPointDefaultTypeInternal() {}
  union {
    ComplexPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComplexPointDefaultTypeInternal _ComplexPoint_default_instance_;
constexpr PointRequest::PointRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thepoint_(nullptr){}
struct PointRequestDefaultTypeInternal {
  constexpr PointRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointRequestDefaultTypeInternal() {}
  union {
    PointRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointRequestDefaultTypeInternal _PointRequest_default_instance_;
constexpr PointResult::PointResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct PointResultDefaultTypeInternal {
  constexpr PointResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointResultDefaultTypeInternal() {}
  union {
    PointResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointResultDefaultTypeInternal _PointResult_default_instance_;
constexpr ComplexStreamDef::ComplexStreamDef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strideforreal_(0)
  , iterationsforreal_(0){}
struct ComplexStreamDefDefaultTypeInternal {
  constexpr ComplexStreamDefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComplexStreamDefDefaultTypeInternal() {}
  union {
    ComplexStreamDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComplexStreamDefDefaultTypeInternal _ComplexStreamDef_default_instance_;
constexpr PointRequestStream::PointRequestStream(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : streamdef_(nullptr)
  , startpoint_(nullptr){}
struct PointRequestStreamDefaultTypeInternal {
  constexpr PointRequestStreamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointRequestStreamDefaultTypeInternal() {}
  union {
    PointRequestStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointRequestStreamDefaultTypeInternal _PointRequestStream_default_instance_;
constexpr PointStreamResult::PointStreamResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iteration_(0)
  , result_(0){}
struct PointStreamResultDefaultTypeInternal {
  constexpr PointStreamResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointStreamResultDefaultTypeInternal() {}
  union {
    PointStreamResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointStreamResultDefaultTypeInternal _PointStreamResult_default_instance_;
}  // namespace generated
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mandelbrot_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mandelbrot_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mandelbrot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mandelbrot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::generated::ComplexPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::generated::ComplexPoint, real_),
  PROTOBUF_FIELD_OFFSET(::generated::ComplexPoint, imaginary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::generated::PointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::generated::PointRequest, thepoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::generated::PointResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::generated::PointResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::generated::ComplexStreamDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::generated::ComplexStreamDef, iterationsforreal_),
  PROTOBUF_FIELD_OFFSET(::generated::ComplexStreamDef, strideforreal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::generated::PointRequestStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::generated::PointRequestStream, streamdef_),
  PROTOBUF_FIELD_OFFSET(::generated::PointRequestStream, startpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::generated::PointStreamResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::generated::PointStreamResult, iteration_),
  PROTOBUF_FIELD_OFFSET(::generated::PointStreamResult, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::generated::ComplexPoint)},
  { 7, -1, sizeof(::generated::PointRequest)},
  { 13, -1, sizeof(::generated::PointResult)},
  { 19, -1, sizeof(::generated::ComplexStreamDef)},
  { 26, -1, sizeof(::generated::PointRequestStream)},
  { 33, -1, sizeof(::generated::PointStreamResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::generated::_ComplexPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::generated::_PointRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::generated::_PointResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::generated::_ComplexStreamDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::generated::_PointRequestStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::generated::_PointStreamResult_default_instance_),
};

const char descriptor_table_protodef_mandelbrot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020mandelbrot.proto\022\tgenerated\"/\n\014Complex"
  "Point\022\014\n\004Real\030\001 \001(\001\022\021\n\tImaginary\030\002 \001(\001\"9"
  "\n\014PointRequest\022)\n\010ThePoint\030\001 \001(\0132\027.gener"
  "ated.ComplexPoint\"\035\n\013PointResult\022\016\n\006Resu"
  "lt\030\001 \001(\005\"D\n\020ComplexStreamDef\022\031\n\021Iteratio"
  "nsForReal\030\001 \001(\005\022\025\n\rStrideForReal\030\002 \001(\001\"q"
  "\n\022PointRequestStream\022.\n\tStreamdef\030\001 \001(\0132"
  "\033.generated.ComplexStreamDef\022+\n\nStartPoi"
  "nt\030\002 \001(\0132\027.generated.ComplexPoint\"6\n\021Poi"
  "ntStreamResult\022\021\n\tIteration\030\001 \001(\005\022\016\n\006Res"
  "ult\030\002 \001(\0052\271\001\n\035ComplexPointProcessingServ"
  "ice\022A\n\014ProcessPoint\022\027.generated.PointReq"
  "uest\032\026.generated.PointResult\"\000\022U\n\022Proces"
  "sPointStream\022\035.generated.PointRequestStr"
  "eam\032\034.generated.PointStreamResult\"\0000\001B\004Z"
  "\002./b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mandelbrot_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mandelbrot_2eproto = {
  false, false, 611, descriptor_table_protodef_mandelbrot_2eproto, "mandelbrot.proto", 
  &descriptor_table_mandelbrot_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_mandelbrot_2eproto::offsets,
  file_level_metadata_mandelbrot_2eproto, file_level_enum_descriptors_mandelbrot_2eproto, file_level_service_descriptors_mandelbrot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_mandelbrot_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mandelbrot_2eproto);
  return descriptor_table_mandelbrot_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mandelbrot_2eproto(&descriptor_table_mandelbrot_2eproto);
namespace generated {

// ===================================================================

class ComplexPoint::_Internal {
 public:
};

ComplexPoint::ComplexPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:generated.ComplexPoint)
}
ComplexPoint::ComplexPoint(const ComplexPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&real_, &from.real_,
    static_cast<size_t>(reinterpret_cast<char*>(&imaginary_) -
    reinterpret_cast<char*>(&real_)) + sizeof(imaginary_));
  // @@protoc_insertion_point(copy_constructor:generated.ComplexPoint)
}

void ComplexPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&real_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&imaginary_) -
    reinterpret_cast<char*>(&real_)) + sizeof(imaginary_));
}

ComplexPoint::~ComplexPoint() {
  // @@protoc_insertion_point(destructor:generated.ComplexPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComplexPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComplexPoint::ArenaDtor(void* object) {
  ComplexPoint* _this = reinterpret_cast< ComplexPoint* >(object);
  (void)_this;
}
void ComplexPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComplexPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComplexPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.ComplexPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&real_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imaginary_) -
      reinterpret_cast<char*>(&real_)) + sizeof(imaginary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double Real = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          real_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Imaginary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          imaginary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComplexPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.ComplexPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Real = 1;
  if (!(this->real() <= 0 && this->real() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_real(), target);
  }

  // double Imaginary = 2;
  if (!(this->imaginary() <= 0 && this->imaginary() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_imaginary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.ComplexPoint)
  return target;
}

size_t ComplexPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.ComplexPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Real = 1;
  if (!(this->real() <= 0 && this->real() >= 0)) {
    total_size += 1 + 8;
  }

  // double Imaginary = 2;
  if (!(this->imaginary() <= 0 && this->imaginary() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComplexPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:generated.ComplexPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComplexPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:generated.ComplexPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:generated.ComplexPoint)
    MergeFrom(*source);
  }
}

void ComplexPoint::MergeFrom(const ComplexPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:generated.ComplexPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.real() <= 0 && from.real() >= 0)) {
    _internal_set_real(from._internal_real());
  }
  if (!(from.imaginary() <= 0 && from.imaginary() >= 0)) {
    _internal_set_imaginary(from._internal_imaginary());
  }
}

void ComplexPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:generated.ComplexPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexPoint::CopyFrom(const ComplexPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.ComplexPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexPoint::IsInitialized() const {
  return true;
}

void ComplexPoint::InternalSwap(ComplexPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexPoint, imaginary_)
      + sizeof(ComplexPoint::imaginary_)
      - PROTOBUF_FIELD_OFFSET(ComplexPoint, real_)>(
          reinterpret_cast<char*>(&real_),
          reinterpret_cast<char*>(&other->real_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PointRequest::_Internal {
 public:
  static const ::generated::ComplexPoint& thepoint(const PointRequest* msg);
};

const ::generated::ComplexPoint&
PointRequest::_Internal::thepoint(const PointRequest* msg) {
  return *msg->thepoint_;
}
PointRequest::PointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:generated.PointRequest)
}
PointRequest::PointRequest(const PointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_thepoint()) {
    thepoint_ = new ::generated::ComplexPoint(*from.thepoint_);
  } else {
    thepoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:generated.PointRequest)
}

void PointRequest::SharedCtor() {
thepoint_ = nullptr;
}

PointRequest::~PointRequest() {
  // @@protoc_insertion_point(destructor:generated.PointRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete thepoint_;
}

void PointRequest::ArenaDtor(void* object) {
  PointRequest* _this = reinterpret_cast< PointRequest* >(object);
  (void)_this;
}
void PointRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.PointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && thepoint_ != nullptr) {
    delete thepoint_;
  }
  thepoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .generated.ComplexPoint ThePoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_thepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.PointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.ComplexPoint ThePoint = 1;
  if (this->has_thepoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::thepoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.PointRequest)
  return target;
}

size_t PointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.PointRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .generated.ComplexPoint ThePoint = 1;
  if (this->has_thepoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thepoint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:generated.PointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PointRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:generated.PointRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:generated.PointRequest)
    MergeFrom(*source);
  }
}

void PointRequest::MergeFrom(const PointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:generated.PointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_thepoint()) {
    _internal_mutable_thepoint()->::generated::ComplexPoint::MergeFrom(from._internal_thepoint());
  }
}

void PointRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:generated.PointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointRequest::CopyFrom(const PointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.PointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointRequest::IsInitialized() const {
  return true;
}

void PointRequest::InternalSwap(PointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(thepoint_, other->thepoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PointResult::_Internal {
 public:
};

PointResult::PointResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:generated.PointResult)
}
PointResult::PointResult(const PointResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:generated.PointResult)
}

void PointResult::SharedCtor() {
result_ = 0;
}

PointResult::~PointResult() {
  // @@protoc_insertion_point(destructor:generated.PointResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PointResult::ArenaDtor(void* object) {
  PointResult* _this = reinterpret_cast< PointResult* >(object);
  (void)_this;
}
void PointResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointResult::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.PointResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.PointResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.PointResult)
  return target;
}

size_t PointResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.PointResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:generated.PointResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PointResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:generated.PointResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:generated.PointResult)
    MergeFrom(*source);
  }
}

void PointResult::MergeFrom(const PointResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:generated.PointResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void PointResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:generated.PointResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointResult::CopyFrom(const PointResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.PointResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointResult::IsInitialized() const {
  return true;
}

void PointResult::InternalSwap(PointResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ComplexStreamDef::_Internal {
 public:
};

ComplexStreamDef::ComplexStreamDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:generated.ComplexStreamDef)
}
ComplexStreamDef::ComplexStreamDef(const ComplexStreamDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&strideforreal_, &from.strideforreal_,
    static_cast<size_t>(reinterpret_cast<char*>(&iterationsforreal_) -
    reinterpret_cast<char*>(&strideforreal_)) + sizeof(iterationsforreal_));
  // @@protoc_insertion_point(copy_constructor:generated.ComplexStreamDef)
}

void ComplexStreamDef::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&strideforreal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iterationsforreal_) -
    reinterpret_cast<char*>(&strideforreal_)) + sizeof(iterationsforreal_));
}

ComplexStreamDef::~ComplexStreamDef() {
  // @@protoc_insertion_point(destructor:generated.ComplexStreamDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComplexStreamDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComplexStreamDef::ArenaDtor(void* object) {
  ComplexStreamDef* _this = reinterpret_cast< ComplexStreamDef* >(object);
  (void)_this;
}
void ComplexStreamDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComplexStreamDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComplexStreamDef::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.ComplexStreamDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&strideforreal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iterationsforreal_) -
      reinterpret_cast<char*>(&strideforreal_)) + sizeof(iterationsforreal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexStreamDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 IterationsForReal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iterationsforreal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double StrideForReal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          strideforreal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComplexStreamDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.ComplexStreamDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 IterationsForReal = 1;
  if (this->iterationsforreal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iterationsforreal(), target);
  }

  // double StrideForReal = 2;
  if (!(this->strideforreal() <= 0 && this->strideforreal() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_strideforreal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.ComplexStreamDef)
  return target;
}

size_t ComplexStreamDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.ComplexStreamDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double StrideForReal = 2;
  if (!(this->strideforreal() <= 0 && this->strideforreal() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 IterationsForReal = 1;
  if (this->iterationsforreal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iterationsforreal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComplexStreamDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:generated.ComplexStreamDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexStreamDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComplexStreamDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:generated.ComplexStreamDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:generated.ComplexStreamDef)
    MergeFrom(*source);
  }
}

void ComplexStreamDef::MergeFrom(const ComplexStreamDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:generated.ComplexStreamDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.strideforreal() <= 0 && from.strideforreal() >= 0)) {
    _internal_set_strideforreal(from._internal_strideforreal());
  }
  if (from.iterationsforreal() != 0) {
    _internal_set_iterationsforreal(from._internal_iterationsforreal());
  }
}

void ComplexStreamDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:generated.ComplexStreamDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexStreamDef::CopyFrom(const ComplexStreamDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.ComplexStreamDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexStreamDef::IsInitialized() const {
  return true;
}

void ComplexStreamDef::InternalSwap(ComplexStreamDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexStreamDef, iterationsforreal_)
      + sizeof(ComplexStreamDef::iterationsforreal_)
      - PROTOBUF_FIELD_OFFSET(ComplexStreamDef, strideforreal_)>(
          reinterpret_cast<char*>(&strideforreal_),
          reinterpret_cast<char*>(&other->strideforreal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexStreamDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PointRequestStream::_Internal {
 public:
  static const ::generated::ComplexStreamDef& streamdef(const PointRequestStream* msg);
  static const ::generated::ComplexPoint& startpoint(const PointRequestStream* msg);
};

const ::generated::ComplexStreamDef&
PointRequestStream::_Internal::streamdef(const PointRequestStream* msg) {
  return *msg->streamdef_;
}
const ::generated::ComplexPoint&
PointRequestStream::_Internal::startpoint(const PointRequestStream* msg) {
  return *msg->startpoint_;
}
PointRequestStream::PointRequestStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:generated.PointRequestStream)
}
PointRequestStream::PointRequestStream(const PointRequestStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_streamdef()) {
    streamdef_ = new ::generated::ComplexStreamDef(*from.streamdef_);
  } else {
    streamdef_ = nullptr;
  }
  if (from._internal_has_startpoint()) {
    startpoint_ = new ::generated::ComplexPoint(*from.startpoint_);
  } else {
    startpoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:generated.PointRequestStream)
}

void PointRequestStream::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&streamdef_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&startpoint_) -
    reinterpret_cast<char*>(&streamdef_)) + sizeof(startpoint_));
}

PointRequestStream::~PointRequestStream() {
  // @@protoc_insertion_point(destructor:generated.PointRequestStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointRequestStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete streamdef_;
  if (this != internal_default_instance()) delete startpoint_;
}

void PointRequestStream::ArenaDtor(void* object) {
  PointRequestStream* _this = reinterpret_cast< PointRequestStream* >(object);
  (void)_this;
}
void PointRequestStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointRequestStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointRequestStream::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.PointRequestStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && streamdef_ != nullptr) {
    delete streamdef_;
  }
  streamdef_ = nullptr;
  if (GetArena() == nullptr && startpoint_ != nullptr) {
    delete startpoint_;
  }
  startpoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointRequestStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .generated.ComplexStreamDef Streamdef = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_streamdef(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .generated.ComplexPoint StartPoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_startpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointRequestStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.PointRequestStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .generated.ComplexStreamDef Streamdef = 1;
  if (this->has_streamdef()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::streamdef(this), target, stream);
  }

  // .generated.ComplexPoint StartPoint = 2;
  if (this->has_startpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::startpoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.PointRequestStream)
  return target;
}

size_t PointRequestStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.PointRequestStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .generated.ComplexStreamDef Streamdef = 1;
  if (this->has_streamdef()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *streamdef_);
  }

  // .generated.ComplexPoint StartPoint = 2;
  if (this->has_startpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startpoint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointRequestStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:generated.PointRequestStream)
  GOOGLE_DCHECK_NE(&from, this);
  const PointRequestStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointRequestStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:generated.PointRequestStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:generated.PointRequestStream)
    MergeFrom(*source);
  }
}

void PointRequestStream::MergeFrom(const PointRequestStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:generated.PointRequestStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_streamdef()) {
    _internal_mutable_streamdef()->::generated::ComplexStreamDef::MergeFrom(from._internal_streamdef());
  }
  if (from.has_startpoint()) {
    _internal_mutable_startpoint()->::generated::ComplexPoint::MergeFrom(from._internal_startpoint());
  }
}

void PointRequestStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:generated.PointRequestStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointRequestStream::CopyFrom(const PointRequestStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.PointRequestStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointRequestStream::IsInitialized() const {
  return true;
}

void PointRequestStream::InternalSwap(PointRequestStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointRequestStream, startpoint_)
      + sizeof(PointRequestStream::startpoint_)
      - PROTOBUF_FIELD_OFFSET(PointRequestStream, streamdef_)>(
          reinterpret_cast<char*>(&streamdef_),
          reinterpret_cast<char*>(&other->streamdef_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointRequestStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PointStreamResult::_Internal {
 public:
};

PointStreamResult::PointStreamResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:generated.PointStreamResult)
}
PointStreamResult::PointStreamResult(const PointStreamResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iteration_, &from.iteration_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&iteration_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:generated.PointStreamResult)
}

void PointStreamResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iteration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&iteration_)) + sizeof(result_));
}

PointStreamResult::~PointStreamResult() {
  // @@protoc_insertion_point(destructor:generated.PointStreamResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointStreamResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PointStreamResult::ArenaDtor(void* object) {
  PointStreamResult* _this = reinterpret_cast< PointStreamResult* >(object);
  (void)_this;
}
void PointStreamResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointStreamResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointStreamResult::Clear() {
// @@protoc_insertion_point(message_clear_start:generated.PointStreamResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iteration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&iteration_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointStreamResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Iteration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointStreamResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:generated.PointStreamResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Iteration = 1;
  if (this->iteration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iteration(), target);
  }

  // int32 Result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:generated.PointStreamResult)
  return target;
}

size_t PointStreamResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:generated.PointStreamResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Iteration = 1;
  if (this->iteration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iteration());
  }

  // int32 Result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointStreamResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:generated.PointStreamResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PointStreamResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointStreamResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:generated.PointStreamResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:generated.PointStreamResult)
    MergeFrom(*source);
  }
}

void PointStreamResult::MergeFrom(const PointStreamResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:generated.PointStreamResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iteration() != 0) {
    _internal_set_iteration(from._internal_iteration());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void PointStreamResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:generated.PointStreamResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointStreamResult::CopyFrom(const PointStreamResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:generated.PointStreamResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointStreamResult::IsInitialized() const {
  return true;
}

void PointStreamResult::InternalSwap(PointStreamResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointStreamResult, result_)
      + sizeof(PointStreamResult::result_)
      - PROTOBUF_FIELD_OFFSET(PointStreamResult, iteration_)>(
          reinterpret_cast<char*>(&iteration_),
          reinterpret_cast<char*>(&other->iteration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointStreamResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::generated::ComplexPoint* Arena::CreateMaybeMessage< ::generated::ComplexPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::ComplexPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::PointRequest* Arena::CreateMaybeMessage< ::generated::PointRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::PointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::PointResult* Arena::CreateMaybeMessage< ::generated::PointResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::PointResult >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::ComplexStreamDef* Arena::CreateMaybeMessage< ::generated::ComplexStreamDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::ComplexStreamDef >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::PointRequestStream* Arena::CreateMaybeMessage< ::generated::PointRequestStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::PointRequestStream >(arena);
}
template<> PROTOBUF_NOINLINE ::generated::PointStreamResult* Arena::CreateMaybeMessage< ::generated::PointStreamResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::generated::PointStreamResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
