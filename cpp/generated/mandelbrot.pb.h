// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mandelbrot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mandelbrot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mandelbrot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mandelbrot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mandelbrot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mandelbrot_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_mandelbrot_2eproto_metadata_getter(int index);
namespace generated {
class ComplexPoint;
struct ComplexPointDefaultTypeInternal;
extern ComplexPointDefaultTypeInternal _ComplexPoint_default_instance_;
class ComplexStreamDef;
struct ComplexStreamDefDefaultTypeInternal;
extern ComplexStreamDefDefaultTypeInternal _ComplexStreamDef_default_instance_;
class PointRequest;
struct PointRequestDefaultTypeInternal;
extern PointRequestDefaultTypeInternal _PointRequest_default_instance_;
class PointRequestStream;
struct PointRequestStreamDefaultTypeInternal;
extern PointRequestStreamDefaultTypeInternal _PointRequestStream_default_instance_;
class PointResult;
struct PointResultDefaultTypeInternal;
extern PointResultDefaultTypeInternal _PointResult_default_instance_;
class PointStreamResult;
struct PointStreamResultDefaultTypeInternal;
extern PointStreamResultDefaultTypeInternal _PointStreamResult_default_instance_;
}  // namespace generated
PROTOBUF_NAMESPACE_OPEN
template<> ::generated::ComplexPoint* Arena::CreateMaybeMessage<::generated::ComplexPoint>(Arena*);
template<> ::generated::ComplexStreamDef* Arena::CreateMaybeMessage<::generated::ComplexStreamDef>(Arena*);
template<> ::generated::PointRequest* Arena::CreateMaybeMessage<::generated::PointRequest>(Arena*);
template<> ::generated::PointRequestStream* Arena::CreateMaybeMessage<::generated::PointRequestStream>(Arena*);
template<> ::generated::PointResult* Arena::CreateMaybeMessage<::generated::PointResult>(Arena*);
template<> ::generated::PointStreamResult* Arena::CreateMaybeMessage<::generated::PointStreamResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace generated {

// ===================================================================

class ComplexPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:generated.ComplexPoint) */ {
 public:
  inline ComplexPoint() : ComplexPoint(nullptr) {}
  virtual ~ComplexPoint();
  explicit constexpr ComplexPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexPoint(const ComplexPoint& from);
  ComplexPoint(ComplexPoint&& from) noexcept
    : ComplexPoint() {
    *this = ::std::move(from);
  }

  inline ComplexPoint& operator=(const ComplexPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexPoint& operator=(ComplexPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComplexPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexPoint* internal_default_instance() {
    return reinterpret_cast<const ComplexPoint*>(
               &_ComplexPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComplexPoint& a, ComplexPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComplexPoint* New() const final {
    return CreateMaybeMessage<ComplexPoint>(nullptr);
  }

  ComplexPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComplexPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComplexPoint& from);
  void MergeFrom(const ComplexPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.ComplexPoint";
  }
  protected:
  explicit ComplexPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mandelbrot_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealFieldNumber = 1,
    kImaginaryFieldNumber = 2,
  };
  // double Real = 1;
  void clear_real();
  double real() const;
  void set_real(double value);
  private:
  double _internal_real() const;
  void _internal_set_real(double value);
  public:

  // double Imaginary = 2;
  void clear_imaginary();
  double imaginary() const;
  void set_imaginary(double value);
  private:
  double _internal_imaginary() const;
  void _internal_set_imaginary(double value);
  public:

  // @@protoc_insertion_point(class_scope:generated.ComplexPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double real_;
  double imaginary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mandelbrot_2eproto;
};
// -------------------------------------------------------------------

class PointRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:generated.PointRequest) */ {
 public:
  inline PointRequest() : PointRequest(nullptr) {}
  virtual ~PointRequest();
  explicit constexpr PointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointRequest(const PointRequest& from);
  PointRequest(PointRequest&& from) noexcept
    : PointRequest() {
    *this = ::std::move(from);
  }

  inline PointRequest& operator=(const PointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointRequest& operator=(PointRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointRequest* internal_default_instance() {
    return reinterpret_cast<const PointRequest*>(
               &_PointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointRequest& a, PointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PointRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointRequest* New() const final {
    return CreateMaybeMessage<PointRequest>(nullptr);
  }

  PointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointRequest& from);
  void MergeFrom(const PointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.PointRequest";
  }
  protected:
  explicit PointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mandelbrot_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThePointFieldNumber = 1,
  };
  // .generated.ComplexPoint ThePoint = 1;
  bool has_thepoint() const;
  private:
  bool _internal_has_thepoint() const;
  public:
  void clear_thepoint();
  const ::generated::ComplexPoint& thepoint() const;
  ::generated::ComplexPoint* release_thepoint();
  ::generated::ComplexPoint* mutable_thepoint();
  void set_allocated_thepoint(::generated::ComplexPoint* thepoint);
  private:
  const ::generated::ComplexPoint& _internal_thepoint() const;
  ::generated::ComplexPoint* _internal_mutable_thepoint();
  public:
  void unsafe_arena_set_allocated_thepoint(
      ::generated::ComplexPoint* thepoint);
  ::generated::ComplexPoint* unsafe_arena_release_thepoint();

  // @@protoc_insertion_point(class_scope:generated.PointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::generated::ComplexPoint* thepoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mandelbrot_2eproto;
};
// -------------------------------------------------------------------

class PointResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:generated.PointResult) */ {
 public:
  inline PointResult() : PointResult(nullptr) {}
  virtual ~PointResult();
  explicit constexpr PointResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointResult(const PointResult& from);
  PointResult(PointResult&& from) noexcept
    : PointResult() {
    *this = ::std::move(from);
  }

  inline PointResult& operator=(const PointResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointResult& operator=(PointResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointResult* internal_default_instance() {
    return reinterpret_cast<const PointResult*>(
               &_PointResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointResult& a, PointResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PointResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointResult* New() const final {
    return CreateMaybeMessage<PointResult>(nullptr);
  }

  PointResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointResult& from);
  void MergeFrom(const PointResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.PointResult";
  }
  protected:
  explicit PointResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mandelbrot_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 Result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:generated.PointResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mandelbrot_2eproto;
};
// -------------------------------------------------------------------

class ComplexStreamDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:generated.ComplexStreamDef) */ {
 public:
  inline ComplexStreamDef() : ComplexStreamDef(nullptr) {}
  virtual ~ComplexStreamDef();
  explicit constexpr ComplexStreamDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexStreamDef(const ComplexStreamDef& from);
  ComplexStreamDef(ComplexStreamDef&& from) noexcept
    : ComplexStreamDef() {
    *this = ::std::move(from);
  }

  inline ComplexStreamDef& operator=(const ComplexStreamDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexStreamDef& operator=(ComplexStreamDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComplexStreamDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexStreamDef* internal_default_instance() {
    return reinterpret_cast<const ComplexStreamDef*>(
               &_ComplexStreamDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ComplexStreamDef& a, ComplexStreamDef& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexStreamDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexStreamDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComplexStreamDef* New() const final {
    return CreateMaybeMessage<ComplexStreamDef>(nullptr);
  }

  ComplexStreamDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComplexStreamDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComplexStreamDef& from);
  void MergeFrom(const ComplexStreamDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexStreamDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.ComplexStreamDef";
  }
  protected:
  explicit ComplexStreamDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mandelbrot_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrideForRealFieldNumber = 2,
    kIterationsForRealFieldNumber = 1,
  };
  // double StrideForReal = 2;
  void clear_strideforreal();
  double strideforreal() const;
  void set_strideforreal(double value);
  private:
  double _internal_strideforreal() const;
  void _internal_set_strideforreal(double value);
  public:

  // int32 IterationsForReal = 1;
  void clear_iterationsforreal();
  ::PROTOBUF_NAMESPACE_ID::int32 iterationsforreal() const;
  void set_iterationsforreal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iterationsforreal() const;
  void _internal_set_iterationsforreal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:generated.ComplexStreamDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double strideforreal_;
  ::PROTOBUF_NAMESPACE_ID::int32 iterationsforreal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mandelbrot_2eproto;
};
// -------------------------------------------------------------------

class PointRequestStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:generated.PointRequestStream) */ {
 public:
  inline PointRequestStream() : PointRequestStream(nullptr) {}
  virtual ~PointRequestStream();
  explicit constexpr PointRequestStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointRequestStream(const PointRequestStream& from);
  PointRequestStream(PointRequestStream&& from) noexcept
    : PointRequestStream() {
    *this = ::std::move(from);
  }

  inline PointRequestStream& operator=(const PointRequestStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointRequestStream& operator=(PointRequestStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointRequestStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointRequestStream* internal_default_instance() {
    return reinterpret_cast<const PointRequestStream*>(
               &_PointRequestStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PointRequestStream& a, PointRequestStream& b) {
    a.Swap(&b);
  }
  inline void Swap(PointRequestStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointRequestStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointRequestStream* New() const final {
    return CreateMaybeMessage<PointRequestStream>(nullptr);
  }

  PointRequestStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointRequestStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointRequestStream& from);
  void MergeFrom(const PointRequestStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointRequestStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.PointRequestStream";
  }
  protected:
  explicit PointRequestStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mandelbrot_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamdefFieldNumber = 1,
    kStartPointFieldNumber = 2,
  };
  // .generated.ComplexStreamDef Streamdef = 1;
  bool has_streamdef() const;
  private:
  bool _internal_has_streamdef() const;
  public:
  void clear_streamdef();
  const ::generated::ComplexStreamDef& streamdef() const;
  ::generated::ComplexStreamDef* release_streamdef();
  ::generated::ComplexStreamDef* mutable_streamdef();
  void set_allocated_streamdef(::generated::ComplexStreamDef* streamdef);
  private:
  const ::generated::ComplexStreamDef& _internal_streamdef() const;
  ::generated::ComplexStreamDef* _internal_mutable_streamdef();
  public:
  void unsafe_arena_set_allocated_streamdef(
      ::generated::ComplexStreamDef* streamdef);
  ::generated::ComplexStreamDef* unsafe_arena_release_streamdef();

  // .generated.ComplexPoint StartPoint = 2;
  bool has_startpoint() const;
  private:
  bool _internal_has_startpoint() const;
  public:
  void clear_startpoint();
  const ::generated::ComplexPoint& startpoint() const;
  ::generated::ComplexPoint* release_startpoint();
  ::generated::ComplexPoint* mutable_startpoint();
  void set_allocated_startpoint(::generated::ComplexPoint* startpoint);
  private:
  const ::generated::ComplexPoint& _internal_startpoint() const;
  ::generated::ComplexPoint* _internal_mutable_startpoint();
  public:
  void unsafe_arena_set_allocated_startpoint(
      ::generated::ComplexPoint* startpoint);
  ::generated::ComplexPoint* unsafe_arena_release_startpoint();

  // @@protoc_insertion_point(class_scope:generated.PointRequestStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::generated::ComplexStreamDef* streamdef_;
  ::generated::ComplexPoint* startpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mandelbrot_2eproto;
};
// -------------------------------------------------------------------

class PointStreamResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:generated.PointStreamResult) */ {
 public:
  inline PointStreamResult() : PointStreamResult(nullptr) {}
  virtual ~PointStreamResult();
  explicit constexpr PointStreamResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointStreamResult(const PointStreamResult& from);
  PointStreamResult(PointStreamResult&& from) noexcept
    : PointStreamResult() {
    *this = ::std::move(from);
  }

  inline PointStreamResult& operator=(const PointStreamResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointStreamResult& operator=(PointStreamResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointStreamResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointStreamResult* internal_default_instance() {
    return reinterpret_cast<const PointStreamResult*>(
               &_PointStreamResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PointStreamResult& a, PointStreamResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PointStreamResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointStreamResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointStreamResult* New() const final {
    return CreateMaybeMessage<PointStreamResult>(nullptr);
  }

  PointStreamResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointStreamResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointStreamResult& from);
  void MergeFrom(const PointStreamResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointStreamResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "generated.PointStreamResult";
  }
  protected:
  explicit PointStreamResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_mandelbrot_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIterationFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // int32 Iteration = 1;
  void clear_iteration();
  ::PROTOBUF_NAMESPACE_ID::int32 iteration() const;
  void set_iteration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iteration() const;
  void _internal_set_iteration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:generated.PointStreamResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iteration_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mandelbrot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComplexPoint

// double Real = 1;
inline void ComplexPoint::clear_real() {
  real_ = 0;
}
inline double ComplexPoint::_internal_real() const {
  return real_;
}
inline double ComplexPoint::real() const {
  // @@protoc_insertion_point(field_get:generated.ComplexPoint.Real)
  return _internal_real();
}
inline void ComplexPoint::_internal_set_real(double value) {
  
  real_ = value;
}
inline void ComplexPoint::set_real(double value) {
  _internal_set_real(value);
  // @@protoc_insertion_point(field_set:generated.ComplexPoint.Real)
}

// double Imaginary = 2;
inline void ComplexPoint::clear_imaginary() {
  imaginary_ = 0;
}
inline double ComplexPoint::_internal_imaginary() const {
  return imaginary_;
}
inline double ComplexPoint::imaginary() const {
  // @@protoc_insertion_point(field_get:generated.ComplexPoint.Imaginary)
  return _internal_imaginary();
}
inline void ComplexPoint::_internal_set_imaginary(double value) {
  
  imaginary_ = value;
}
inline void ComplexPoint::set_imaginary(double value) {
  _internal_set_imaginary(value);
  // @@protoc_insertion_point(field_set:generated.ComplexPoint.Imaginary)
}

// -------------------------------------------------------------------

// PointRequest

// .generated.ComplexPoint ThePoint = 1;
inline bool PointRequest::_internal_has_thepoint() const {
  return this != internal_default_instance() && thepoint_ != nullptr;
}
inline bool PointRequest::has_thepoint() const {
  return _internal_has_thepoint();
}
inline void PointRequest::clear_thepoint() {
  if (GetArena() == nullptr && thepoint_ != nullptr) {
    delete thepoint_;
  }
  thepoint_ = nullptr;
}
inline const ::generated::ComplexPoint& PointRequest::_internal_thepoint() const {
  const ::generated::ComplexPoint* p = thepoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::ComplexPoint&>(
      ::generated::_ComplexPoint_default_instance_);
}
inline const ::generated::ComplexPoint& PointRequest::thepoint() const {
  // @@protoc_insertion_point(field_get:generated.PointRequest.ThePoint)
  return _internal_thepoint();
}
inline void PointRequest::unsafe_arena_set_allocated_thepoint(
    ::generated::ComplexPoint* thepoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thepoint_);
  }
  thepoint_ = thepoint;
  if (thepoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.PointRequest.ThePoint)
}
inline ::generated::ComplexPoint* PointRequest::release_thepoint() {
  
  ::generated::ComplexPoint* temp = thepoint_;
  thepoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::generated::ComplexPoint* PointRequest::unsafe_arena_release_thepoint() {
  // @@protoc_insertion_point(field_release:generated.PointRequest.ThePoint)
  
  ::generated::ComplexPoint* temp = thepoint_;
  thepoint_ = nullptr;
  return temp;
}
inline ::generated::ComplexPoint* PointRequest::_internal_mutable_thepoint() {
  
  if (thepoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::ComplexPoint>(GetArena());
    thepoint_ = p;
  }
  return thepoint_;
}
inline ::generated::ComplexPoint* PointRequest::mutable_thepoint() {
  // @@protoc_insertion_point(field_mutable:generated.PointRequest.ThePoint)
  return _internal_mutable_thepoint();
}
inline void PointRequest::set_allocated_thepoint(::generated::ComplexPoint* thepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete thepoint_;
  }
  if (thepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(thepoint);
    if (message_arena != submessage_arena) {
      thepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thepoint, submessage_arena);
    }
    
  } else {
    
  }
  thepoint_ = thepoint;
  // @@protoc_insertion_point(field_set_allocated:generated.PointRequest.ThePoint)
}

// -------------------------------------------------------------------

// PointResult

// int32 Result = 1;
inline void PointResult::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointResult::result() const {
  // @@protoc_insertion_point(field_get:generated.PointResult.Result)
  return _internal_result();
}
inline void PointResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void PointResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:generated.PointResult.Result)
}

// -------------------------------------------------------------------

// ComplexStreamDef

// int32 IterationsForReal = 1;
inline void ComplexStreamDef::clear_iterationsforreal() {
  iterationsforreal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComplexStreamDef::_internal_iterationsforreal() const {
  return iterationsforreal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComplexStreamDef::iterationsforreal() const {
  // @@protoc_insertion_point(field_get:generated.ComplexStreamDef.IterationsForReal)
  return _internal_iterationsforreal();
}
inline void ComplexStreamDef::_internal_set_iterationsforreal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iterationsforreal_ = value;
}
inline void ComplexStreamDef::set_iterationsforreal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iterationsforreal(value);
  // @@protoc_insertion_point(field_set:generated.ComplexStreamDef.IterationsForReal)
}

// double StrideForReal = 2;
inline void ComplexStreamDef::clear_strideforreal() {
  strideforreal_ = 0;
}
inline double ComplexStreamDef::_internal_strideforreal() const {
  return strideforreal_;
}
inline double ComplexStreamDef::strideforreal() const {
  // @@protoc_insertion_point(field_get:generated.ComplexStreamDef.StrideForReal)
  return _internal_strideforreal();
}
inline void ComplexStreamDef::_internal_set_strideforreal(double value) {
  
  strideforreal_ = value;
}
inline void ComplexStreamDef::set_strideforreal(double value) {
  _internal_set_strideforreal(value);
  // @@protoc_insertion_point(field_set:generated.ComplexStreamDef.StrideForReal)
}

// -------------------------------------------------------------------

// PointRequestStream

// .generated.ComplexStreamDef Streamdef = 1;
inline bool PointRequestStream::_internal_has_streamdef() const {
  return this != internal_default_instance() && streamdef_ != nullptr;
}
inline bool PointRequestStream::has_streamdef() const {
  return _internal_has_streamdef();
}
inline void PointRequestStream::clear_streamdef() {
  if (GetArena() == nullptr && streamdef_ != nullptr) {
    delete streamdef_;
  }
  streamdef_ = nullptr;
}
inline const ::generated::ComplexStreamDef& PointRequestStream::_internal_streamdef() const {
  const ::generated::ComplexStreamDef* p = streamdef_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::ComplexStreamDef&>(
      ::generated::_ComplexStreamDef_default_instance_);
}
inline const ::generated::ComplexStreamDef& PointRequestStream::streamdef() const {
  // @@protoc_insertion_point(field_get:generated.PointRequestStream.Streamdef)
  return _internal_streamdef();
}
inline void PointRequestStream::unsafe_arena_set_allocated_streamdef(
    ::generated::ComplexStreamDef* streamdef) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streamdef_);
  }
  streamdef_ = streamdef;
  if (streamdef) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.PointRequestStream.Streamdef)
}
inline ::generated::ComplexStreamDef* PointRequestStream::release_streamdef() {
  
  ::generated::ComplexStreamDef* temp = streamdef_;
  streamdef_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::generated::ComplexStreamDef* PointRequestStream::unsafe_arena_release_streamdef() {
  // @@protoc_insertion_point(field_release:generated.PointRequestStream.Streamdef)
  
  ::generated::ComplexStreamDef* temp = streamdef_;
  streamdef_ = nullptr;
  return temp;
}
inline ::generated::ComplexStreamDef* PointRequestStream::_internal_mutable_streamdef() {
  
  if (streamdef_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::ComplexStreamDef>(GetArena());
    streamdef_ = p;
  }
  return streamdef_;
}
inline ::generated::ComplexStreamDef* PointRequestStream::mutable_streamdef() {
  // @@protoc_insertion_point(field_mutable:generated.PointRequestStream.Streamdef)
  return _internal_mutable_streamdef();
}
inline void PointRequestStream::set_allocated_streamdef(::generated::ComplexStreamDef* streamdef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete streamdef_;
  }
  if (streamdef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(streamdef);
    if (message_arena != submessage_arena) {
      streamdef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streamdef, submessage_arena);
    }
    
  } else {
    
  }
  streamdef_ = streamdef;
  // @@protoc_insertion_point(field_set_allocated:generated.PointRequestStream.Streamdef)
}

// .generated.ComplexPoint StartPoint = 2;
inline bool PointRequestStream::_internal_has_startpoint() const {
  return this != internal_default_instance() && startpoint_ != nullptr;
}
inline bool PointRequestStream::has_startpoint() const {
  return _internal_has_startpoint();
}
inline void PointRequestStream::clear_startpoint() {
  if (GetArena() == nullptr && startpoint_ != nullptr) {
    delete startpoint_;
  }
  startpoint_ = nullptr;
}
inline const ::generated::ComplexPoint& PointRequestStream::_internal_startpoint() const {
  const ::generated::ComplexPoint* p = startpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::generated::ComplexPoint&>(
      ::generated::_ComplexPoint_default_instance_);
}
inline const ::generated::ComplexPoint& PointRequestStream::startpoint() const {
  // @@protoc_insertion_point(field_get:generated.PointRequestStream.StartPoint)
  return _internal_startpoint();
}
inline void PointRequestStream::unsafe_arena_set_allocated_startpoint(
    ::generated::ComplexPoint* startpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startpoint_);
  }
  startpoint_ = startpoint;
  if (startpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:generated.PointRequestStream.StartPoint)
}
inline ::generated::ComplexPoint* PointRequestStream::release_startpoint() {
  
  ::generated::ComplexPoint* temp = startpoint_;
  startpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::generated::ComplexPoint* PointRequestStream::unsafe_arena_release_startpoint() {
  // @@protoc_insertion_point(field_release:generated.PointRequestStream.StartPoint)
  
  ::generated::ComplexPoint* temp = startpoint_;
  startpoint_ = nullptr;
  return temp;
}
inline ::generated::ComplexPoint* PointRequestStream::_internal_mutable_startpoint() {
  
  if (startpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::generated::ComplexPoint>(GetArena());
    startpoint_ = p;
  }
  return startpoint_;
}
inline ::generated::ComplexPoint* PointRequestStream::mutable_startpoint() {
  // @@protoc_insertion_point(field_mutable:generated.PointRequestStream.StartPoint)
  return _internal_mutable_startpoint();
}
inline void PointRequestStream::set_allocated_startpoint(::generated::ComplexPoint* startpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete startpoint_;
  }
  if (startpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(startpoint);
    if (message_arena != submessage_arena) {
      startpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startpoint, submessage_arena);
    }
    
  } else {
    
  }
  startpoint_ = startpoint;
  // @@protoc_insertion_point(field_set_allocated:generated.PointRequestStream.StartPoint)
}

// -------------------------------------------------------------------

// PointStreamResult

// int32 Iteration = 1;
inline void PointStreamResult::clear_iteration() {
  iteration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointStreamResult::_internal_iteration() const {
  return iteration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointStreamResult::iteration() const {
  // @@protoc_insertion_point(field_get:generated.PointStreamResult.Iteration)
  return _internal_iteration();
}
inline void PointStreamResult::_internal_set_iteration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iteration_ = value;
}
inline void PointStreamResult::set_iteration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iteration(value);
  // @@protoc_insertion_point(field_set:generated.PointStreamResult.Iteration)
}

// int32 Result = 2;
inline void PointStreamResult::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointStreamResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointStreamResult::result() const {
  // @@protoc_insertion_point(field_get:generated.PointStreamResult.Result)
  return _internal_result();
}
inline void PointStreamResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void PointStreamResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:generated.PointStreamResult.Result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace generated

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mandelbrot_2eproto
